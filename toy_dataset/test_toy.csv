diff,msg,repo,sha,time
"mmm a / Lib / distutils / spawn . py <nl> ppp b / Lib / distutils / spawn . py <nl> <nl> <nl> import sys <nl> import os <nl> + import subprocess <nl> <nl> from distutils . errors import DistutilsPlatformError , DistutilsExecError <nl> from distutils . debug import DEBUG <nl> from distutils import log <nl> <nl> + <nl> + if sys . platform = = ' darwin ' : <nl> + _cfg_target = None <nl> + _cfg_target_split = None <nl> + <nl> + <nl> def spawn ( cmd , search_path = 1 , verbose = 0 , dry_run = 0 ) : <nl> "" "" "" Run another program , specified as a command list ' cmd ' , in a new process . <nl> <nl> def spawn ( cmd , search_path = 1 , verbose = 0 , dry_run = 0 ) : <nl> # cmd is documented as a list , but just in case some code passes a tuple <nl> # in , protect our % - formatting code against horrible death <nl> cmd = list ( cmd ) <nl> - if os . name = = ' posix ' : <nl> - _spawn_posix ( cmd , search_path , dry_run = dry_run ) <nl> - elif os . name = = ' nt ' : <nl> - _spawn_nt ( cmd , search_path , dry_run = dry_run ) <nl> - else : <nl> - raise DistutilsPlatformError ( <nl> - "" don ' t know how to spawn programs on platform ' % s ' "" % os . name ) <nl> - <nl> - def _nt_quote_args ( args ) : <nl> - "" "" "" Quote command - line arguments for DOS / Windows conventions . <nl> - <nl> - Just wraps every argument which contains blanks in double quotes , and <nl> - returns a new argument list . <nl> - "" "" "" <nl> - # XXX this doesn ' t seem very robust to me - - but if the Windows guys <nl> - # say it ' ll work , I guess I ' ll have to accept it . ( What if an arg <nl> - # contains quotes ? What other magic characters , other than spaces , <nl> - # have to be escaped ? Is there an escaping mechanism other than <nl> - # quoting ? ) <nl> - for i , arg in enumerate ( args ) : <nl> - if ' ' in arg : <nl> - args [ i ] = ' "" % s "" ' % arg <nl> - return args <nl> - <nl> - def _spawn_nt ( cmd , search_path = 1 , verbose = 0 , dry_run = 0 ) : <nl> - executable = cmd [ 0 ] <nl> - cmd = _nt_quote_args ( cmd ) <nl> - if search_path : <nl> - # either we find one or it stays the same <nl> - executable = find_executable ( executable ) or executable <nl> - log . info ( ' ' . join ( [ executable ] + cmd [ 1 : ] ) ) <nl> - if not dry_run : <nl> - # spawn for NT requires a full path to the . exe <nl> - try : <nl> - rc = os . spawnv ( os . P_WAIT , executable , cmd ) <nl> - except OSError as exc : <nl> - # this seems to happen when the command isn ' t found <nl> - if not DEBUG : <nl> - cmd = executable <nl> - raise DistutilsExecError ( <nl> - "" command % r failed : % s "" % ( cmd , exc . args [ - 1 ] ) ) <nl> - if rc ! = 0 : <nl> - # and this reflects the command running but failing <nl> - if not DEBUG : <nl> - cmd = executable <nl> - raise DistutilsExecError ( <nl> - "" command % r failed with exit status % d "" % ( cmd , rc ) ) <nl> - <nl> - if sys . platform = = ' darwin ' : <nl> - _cfg_target = None <nl> - _cfg_target_split = None <nl> <nl> - def _spawn_posix ( cmd , search_path = 1 , verbose = 0 , dry_run = 0 ) : <nl> log . info ( ' ' . join ( cmd ) ) <nl> if dry_run : <nl> return <nl> - executable = cmd [ 0 ] <nl> - exec_fn = search_path and os . execvp or os . execv <nl> + <nl> + if search_path : <nl> + executable = find_executable ( cmd [ 0 ] ) <nl> + if executable is not None : <nl> + cmd [ 0 ] = executable <nl> + <nl> env = None <nl> if sys . platform = = ' darwin ' : <nl> global _cfg_target , _cfg_target_split <nl> def _spawn_posix ( cmd , search_path = 1 , verbose = 0 , dry_run = 0 ) : <nl> raise DistutilsPlatformError ( my_msg ) <nl> env = dict ( os . environ , <nl> MACOSX_DEPLOYMENT_TARGET = cur_target ) <nl> - exec_fn = search_path and os . execvpe or os . execve <nl> - pid = os . fork ( ) <nl> - if pid = = 0 : # in the child <nl> - try : <nl> - if env is None : <nl> - exec_fn ( executable , cmd ) <nl> - else : <nl> - exec_fn ( executable , cmd , env ) <nl> - except OSError as e : <nl> - if not DEBUG : <nl> - cmd = executable <nl> - sys . stderr . write ( "" unable to execute % r : % s \ n "" <nl> - % ( cmd , e . strerror ) ) <nl> - os . _exit ( 1 ) <nl> <nl> + proc = subprocess . Popen ( cmd , env = env ) <nl> + proc . wait ( ) <nl> + exitcode = proc . returncode <nl> + <nl> + if exitcode : <nl> if not DEBUG : <nl> - cmd = executable <nl> - sys . stderr . write ( "" unable to execute % r for unknown reasons "" % cmd ) <nl> - os . _exit ( 1 ) <nl> - else : # in the parent <nl> - # Loop until the child either exits or is terminated by a signal <nl> - # ( ie . keep waiting if it ' s merely stopped ) <nl> - while True : <nl> - try : <nl> - pid , status = os . waitpid ( pid , 0 ) <nl> - except OSError as exc : <nl> - if not DEBUG : <nl> - cmd = executable <nl> - raise DistutilsExecError ( <nl> - "" command % r failed : % s "" % ( cmd , exc . args [ - 1 ] ) ) <nl> - if os . WIFSIGNALED ( status ) : <nl> - if not DEBUG : <nl> - cmd = executable <nl> - raise DistutilsExecError ( <nl> - "" command % r terminated by signal % d "" <nl> - % ( cmd , os . WTERMSIG ( status ) ) ) <nl> - elif os . WIFEXITED ( status ) : <nl> - exit_status = os . WEXITSTATUS ( status ) <nl> - if exit_status = = 0 : <nl> - return # hey , it succeeded ! <nl> - else : <nl> - if not DEBUG : <nl> - cmd = executable <nl> - raise DistutilsExecError ( <nl> - "" command % r failed with exit status % d "" <nl> - % ( cmd , exit_status ) ) <nl> - elif os . WIFSTOPPED ( status ) : <nl> - continue <nl> - else : <nl> - if not DEBUG : <nl> - cmd = executable <nl> - raise DistutilsExecError ( <nl> - "" unknown error executing % r : termination status % d "" <nl> - % ( cmd , status ) ) <nl> + cmd = cmd [ 0 ] <nl> + raise DistutilsExecError ( <nl> + "" command % r failed with exit code % s "" % ( cmd , exitcode ) ) <nl> + <nl> <nl> def find_executable ( executable , path = None ) : <nl> "" "" "" Tries to find ' executable ' in the directories listed in ' path ' . <nl> mmm a / Lib / distutils / tests / test_spawn . py <nl> ppp b / Lib / distutils / tests / test_spawn . py <nl> <nl> from test import support as test_support <nl> <nl> from distutils . spawn import find_executable <nl> - from distutils . spawn import _nt_quote_args <nl> from distutils . spawn import spawn <nl> from distutils . errors import DistutilsExecError <nl> from distutils . tests import support <nl> class SpawnTestCase ( support . TempdirManager , <nl> support . LoggingSilencer , <nl> unittest . TestCase ) : <nl> <nl> - def test_nt_quote_args ( self ) : <nl> - <nl> - for ( args , wanted ) in ( ( [ ' with space ' , ' nospace ' ] , <nl> - [ ' "" with space "" ' , ' nospace ' ] ) , <nl> - ( [ ' nochange ' , ' nospace ' ] , <nl> - [ ' nochange ' , ' nospace ' ] ) ) : <nl> - res = _nt_quote_args ( args ) <nl> - self . assertEqual ( res , wanted ) <nl> - <nl> - <nl> @ unittest . skipUnless ( os . name in ( ' nt ' , ' posix ' ) , <nl> ' Runs only under posix or nt ' ) <nl> def test_spawn ( self ) : <nl> new file mode 100644 <nl> index 0000000000000 . . e983b4f338a94 <nl> mmm / dev / null <nl> ppp b / Misc / NEWS . d / next / Build / 2020 - 03 - 02 - 14 - 44 - 09 . bpo - 39763 . GGEwhH . rst <nl> <nl> + setup . py now uses a basic implementation of the : mod : ` subprocess ` module if <nl> + the : mod : ` subprocess ` module is not available : before required C extension <nl> + modules are built . <nl> new file mode 100644 <nl> index 0000000000000 . . 73ea8f9ab69a6 <nl> mmm / dev / null <nl> ppp b / Misc / NEWS . d / next / Library / 2020 - 03 - 02 - 14 - 43 - 19 . bpo - 39763 . 5a822c . rst <nl> <nl> + Reimplement : func : ` distutils . spawn . spawn ` function with the <nl> + : mod : ` subprocess ` module . <nl> mmm a / setup . py <nl> ppp b / setup . py <nl> <nl> import sysconfig <nl> from glob import glob <nl> <nl> + <nl> + try : <nl> + import subprocess <nl> + del subprocess <nl> + SUBPROCESS_BOOTSTRAP = False <nl> + except ImportError : <nl> + SUBPROCESS_BOOTSTRAP = True <nl> + <nl> + # Bootstrap Python : distutils . spawn uses subprocess to build C extensions , <nl> + # subprocess requires C extensions built by setup . py like _posixsubprocess . <nl> + # <nl> + # Basic subprocess implementation for POSIX ( setup . py is not used on <nl> + # Windows ) which only uses os functions . Only implement features required <nl> + # by distutils . spawn . <nl> + # <nl> + # It is dropped from sys . modules as soon as all C extension modules <nl> + # are built . <nl> + class Popen : <nl> + def __init__ ( self , cmd , env = None ) : <nl> + self . _cmd = cmd <nl> + self . _env = env <nl> + self . returncode = None <nl> + <nl> + def wait ( self ) : <nl> + pid = os . fork ( ) <nl> + if pid = = 0 : <nl> + # Child process <nl> + try : <nl> + if self . _env is not None : <nl> + os . execve ( self . _cmd [ 0 ] , self . _cmd , self . _env ) <nl> + else : <nl> + os . execv ( self . _cmd [ 0 ] , self . _cmd ) <nl> + finally : <nl> + os . _exit ( 1 ) <nl> + else : <nl> + # Parent process <nl> + pid , status = os . waitpid ( pid , 0 ) <nl> + if os . WIFSIGNALED ( status ) : <nl> + self . returncode = - os . WTERMSIG ( status ) <nl> + elif os . WIFEXITED ( status ) : <nl> + self . returncode = os . WEXITSTATUS ( status ) <nl> + elif os . WIFSTOPPED ( status ) : <nl> + self . returncode = - os . WSTOPSIG ( sts ) <nl> + else : <nl> + # Should never happen <nl> + raise Exception ( "" Unknown child exit status ! "" ) <nl> + <nl> + return self . returncode <nl> + <nl> + mod = type ( sys ) ( ' subprocess ' ) <nl> + mod . Popen = Popen <nl> + sys . modules [ ' subprocess ' ] = mod <nl> + del mod <nl> + <nl> + <nl> from distutils import log <nl> from distutils . command . build_ext import build_ext <nl> from distutils . command . build_scripts import build_scripts <nl> def build_extensions ( self ) : <nl> <nl> build_ext . build_extensions ( self ) <nl> <nl> + if SUBPROCESS_BOOTSTRAP : <nl> + # Drop our custom subprocess module : <nl> + # use the newly built subprocess module <nl> + del sys . modules [ ' subprocess ' ] <nl> + <nl> for ext in self . extensions : <nl> self . check_extension_import ( ext ) <nl> <nl>",bpo - 39763 : distutils . spawn now uses subprocess ( GH - 18743 ),python/cpython,1ec63b62035e73111e204a0e03b83503e1c58f2e,2020-03-04T13:50:19Z
"mmm a / Include / sysmodule . h <nl> ppp b / Include / sysmodule . h <nl> PyAPI_FUNC ( void ) PySys_WriteStderr ( const char * format , . . . ) <nl> PyAPI_FUNC ( void ) PySys_FormatStdout ( const char * format , . . . ) ; <nl> PyAPI_FUNC ( void ) PySys_FormatStderr ( const char * format , . . . ) ; <nl> <nl> - # ifndef Py_LIMITED_API <nl> - PyAPI_DATA ( PyObject * ) _PySys_TraceFunc , * _PySys_ProfileFunc ; <nl> - # endif <nl> - <nl> PyAPI_FUNC ( void ) PySys_ResetWarnOptions ( void ) ; <nl> PyAPI_FUNC ( void ) PySys_AddWarnOption ( const wchar_t * ) ; <nl> PyAPI_FUNC ( void ) PySys_AddWarnOptionUnicode ( PyObject * ) ; <nl>",Issue : Remove declarations of nonexistent private variables .,python/cpython,d7be03aafab4b0a9ff9a3a1701220b380028862d,2013-02-01T11:15:17Z
"mmm a / homeassistant / components / light / lifx . py <nl> ppp b / homeassistant / components / light / lifx . py <nl> <nl> <nl> _LOGGER = logging . getLogger ( __name__ ) <nl> <nl> - REQUIREMENTS = [ ' liffylights = = 0 . 9 . 3 ' ] <nl> + REQUIREMENTS = [ ' liffylights = = 0 . 9 . 4 ' ] <nl> DEPENDENCIES = [ ] <nl> <nl> CONF_SERVER = "" server "" # server address configuration item <nl> def on_device ( self , ipaddr , name , power , hue , sat , bri , kel ) : <nl> power , hue , sat , bri , kel ) <nl> self . _devices . append ( bulb ) <nl> self . _add_devices_callback ( [ bulb ] ) <nl> + else : <nl> + _LOGGER . debug ( "" update bulb % s % s % d % d % d % d % d "" , <nl> + ipaddr , name , power , hue , sat , bri , kel ) <nl> + bulb . set_power ( power ) <nl> + bulb . set_color ( hue , sat , bri , kel ) <nl> + bulb . update_ha_state ( ) <nl> <nl> # pylint : disable = too - many - arguments <nl> def on_color ( self , ipaddr , hue , sat , bri , kel ) : <nl> def setup_platform ( hass , config , add_devices_callback , discovery_info = None ) : <nl> lifx_library = LIFX ( add_devices_callback , server_addr , broadcast_addr ) <nl> <nl> # register our poll service <nl> - track_time_change ( hass , lifx_library . poll , second = 10 ) <nl> + track_time_change ( hass , lifx_library . poll , second = [ 10 , 40 ] ) <nl> <nl> lifx_library . probe ( ) <nl> <nl> mmm a / requirements_all . txt <nl> ppp b / requirements_all . txt <nl> blinkstick = = 1 . 1 . 7 <nl> phue = = 0 . 8 <nl> <nl> # homeassistant . components . light . lifx <nl> - liffylights = = 0 . 9 . 3 <nl> + liffylights = = 0 . 9 . 4 <nl> <nl> # homeassistant . components . light . limitlessled <nl> limitlessled = = 1 . 0 . 0 <nl>",New liffylights release improves device detection,home-assistant/core,9caa4752a43283547d4891ee501555b65074fbe8,2016-02-01T18:29:43Z
"mmm a / docs / production / authentication - methods . md <nl> ppp b / docs / production / authentication - methods . md <nl> email and password . <nl> When first setting up your Zulip server , this method must be used for <nl> creating the initial realm and user . You can disable it after that . <nl> <nl> - # # Plug - and - play SSO ( Google , GitHub , LDAP ) <nl> + # # Plug - and - play SSO ( Google , GitHub ) <nl> <nl> With just a few lines of configuration , your Zulip server can <nl> authenticate users with any of several single - sign - on ( SSO ) <nl> authentication providers : <nl> * Google accounts , with ` GoogleMobileOauth2Backend ` <nl> * GitHub accounts , with ` GitHubAuthBackend ` <nl> - * Your LDAP server , with ` ZulipLDAPAuthBackend ` <nl> <nl> Each of these requires one to a handful of lines of configuration in <nl> ` settings . py ` , as well as a secret in ` zulip - secrets . conf ` . Details <nl> mmm a / templates / zerver / api / server - settings . md <nl> ppp b / templates / zerver / api / server - settings . md <nl> curl { { api_url } } / v1 / server_settings \ <nl> * ` realm_description ` : HTML description of the organization , as configured by <nl> the [ organization profile ] ( / help / create - your - organization - profile ) . <nl> <nl> - [ ldap - auth ] : https : / / zulip . readthedocs . io / en / latest / production / authentication - methods . html # plug - and - play - sso - google - github - ldap <nl> + [ ldap - auth ] : https : / / zulip . readthedocs . io / en / latest / production / authentication - methods . html # ldap - including - active - directory <nl> <nl> Please note that not all of these attributes are guaranteed to appear in a <nl> response , for two reasons : <nl> mmm a / zerver / openapi / zulip . yaml <nl> ppp b / zerver / openapi / zulip . yaml <nl> paths : <nl> type : boolean <nl> description : Whether usernames should have an email <nl> address format . This is important if your server has <nl> - [ LDAP authentication ] ( https : / / zulip . readthedocs . io / en / latest / production / authentication - methods . html # plug - and - play - sso - google - github - ldap ) <nl> + [ LDAP authentication ] ( https : / / zulip . readthedocs . io / en / latest / production / authentication - methods . html # ldap - including - active - directory ) <nl> enabled with a username and password combination . <nl> realm_uri : <nl> type : string <nl>",docs : Move LDAP documentation out of plug - and - play section .,zulip/zulip,a943e55863677e9c19f9481500d75a698b11d656,2018-09-27T20:38:14Z
"mmm a / Lib / distutils / tests / test_archive_util . py <nl> ppp b / Lib / distutils / tests / test_archive_util . py <nl> def test_compress_deprecated ( self ) : <nl> dry_run = True ) <nl> finally : <nl> os . chdir ( old_dir ) <nl> - self . assertTrue ( not os . path . exists ( tarball ) ) <nl> + self . assertFalse ( os . path . exists ( tarball ) ) <nl> self . assertEqual ( len ( w . warnings ) , 1 ) <nl> <nl> @ unittest . skipUnless ( ZIP_SUPPORT and ZLIB_SUPPORT , <nl> mmm a / Lib / distutils / tests / test_bdist_rpm . py <nl> ppp b / Lib / distutils / tests / test_bdist_rpm . py <nl> def test_quiet ( self ) : <nl> cmd . run ( ) <nl> <nl> dist_created = os . listdir ( os . path . join ( pkg_dir , ' dist ' ) ) <nl> - self . assertTrue ( ' foo - 0 . 1 - 1 . noarch . rpm ' in dist_created ) <nl> + self . assertIn ( ' foo - 0 . 1 - 1 . noarch . rpm ' , dist_created ) <nl> <nl> # bug # 2945 : upload ignores bdist_rpm files <nl> self . assertIn ( ( ' bdist_rpm ' , ' any ' , ' dist / foo - 0 . 1 - 1 . src . rpm ' ) , dist . dist_files ) <nl> def test_no_optimize_flag ( self ) : <nl> cmd . run ( ) <nl> <nl> dist_created = os . listdir ( os . path . join ( pkg_dir , ' dist ' ) ) <nl> - self . assertTrue ( ' foo - 0 . 1 - 1 . noarch . rpm ' in dist_created ) <nl> + self . assertIn ( ' foo - 0 . 1 - 1 . noarch . rpm ' , dist_created ) <nl> <nl> # bug # 2945 : upload ignores bdist_rpm files <nl> self . assertIn ( ( ' bdist_rpm ' , ' any ' , ' dist / foo - 0 . 1 - 1 . src . rpm ' ) , dist . dist_files ) <nl> mmm a / Lib / distutils / tests / test_bdist_wininst . py <nl> ppp b / Lib / distutils / tests / test_bdist_wininst . py <nl> def test_get_exe_bytes ( self ) : <nl> # and make sure it finds it and returns its content <nl> # no matter what platform we have <nl> exe_file = cmd . get_exe_bytes ( ) <nl> - self . assertTrue ( len ( exe_file ) > 10 ) <nl> + self . assertGreater ( len ( exe_file ) , 10 ) <nl> <nl> def test_suite ( ) : <nl> return unittest . makeSuite ( BuildWinInstTestCase ) <nl> mmm a / Lib / distutils / tests / test_build_clib . py <nl> ppp b / Lib / distutils / tests / test_build_clib . py <nl> def test_run ( self ) : <nl> cmd . run ( ) <nl> <nl> # let ' s check the result <nl> - self . assertTrue ( ' libfoo . a ' in os . listdir ( build_temp ) ) <nl> + self . assertIn ( ' libfoo . a ' , os . listdir ( build_temp ) ) <nl> <nl> def test_suite ( ) : <nl> return unittest . makeSuite ( BuildCLibTestCase ) <nl> mmm a / Lib / distutils / tests / test_build_ext . py <nl> ppp b / Lib / distutils / tests / test_build_ext . py <nl> def test_build_ext ( self ) : <nl> if support . HAVE_DOCSTRINGS : <nl> doc = ' This is a template module just for instruction . ' <nl> self . assertEqual ( xx . __doc__ , doc ) <nl> - self . assertTrue ( isinstance ( xx . Null ( ) , xx . Null ) ) <nl> - self . assertTrue ( isinstance ( xx . Str ( ) , xx . Str ) ) <nl> + self . assertIsInstance ( xx . Null ( ) , xx . Null ) <nl> + self . assertIsInstance ( xx . Str ( ) , xx . Str ) <nl> <nl> def tearDown ( self ) : <nl> # Get everything back to normal <nl> def test_solaris_enable_shared ( self ) : <nl> _config_vars [ ' Py_ENABLE_SHARED ' ] = old_var <nl> <nl> # make sure we get some library dirs under solaris <nl> - self . assertTrue ( len ( cmd . library_dirs ) > 0 ) <nl> + self . assertGreater ( len ( cmd . library_dirs ) , 0 ) <nl> <nl> def test_user_site ( self ) : <nl> # site . USER_SITE was introduced in 2 . 6 <nl> def test_user_site ( self ) : <nl> # making sure the user option is there <nl> options = [ name for name , short , lable in <nl> cmd . user_options ] <nl> - self . assertTrue ( ' user ' in options ) <nl> + self . assertIn ( ' user ' , options ) <nl> <nl> # setting a value <nl> cmd . user = 1 <nl> def test_finalize_options ( self ) : <nl> <nl> from distutils import sysconfig <nl> py_include = sysconfig . get_python_inc ( ) <nl> - self . assertTrue ( py_include in cmd . include_dirs ) <nl> + self . assertIn ( py_include , cmd . include_dirs ) <nl> <nl> plat_py_include = sysconfig . get_python_inc ( plat_specific = 1 ) <nl> - self . assertTrue ( plat_py_include in cmd . include_dirs ) <nl> + self . assertIn ( plat_py_include , cmd . include_dirs ) <nl> <nl> # make sure cmd . libraries is turned into a list <nl> # if it ' s a string <nl> def test_check_extensions_list ( self ) : <nl> ' some ' : ' bar ' } ) ] <nl> cmd . check_extensions_list ( exts ) <nl> ext = exts [ 0 ] <nl> - self . assertTrue ( isinstance ( ext , Extension ) ) <nl> + self . assertIsInstance ( ext , Extension ) <nl> <nl> # check_extensions_list adds in ext the values passed <nl> # when they are in ( ' include_dirs ' , ' library_dirs ' , ' libraries ' <nl> # ' extra_objects ' , ' extra_compile_args ' , ' extra_link_args ' ) <nl> self . assertEqual ( ext . libraries , ' foo ' ) <nl> - self . assertTrue ( not hasattr ( ext , ' some ' ) ) <nl> + self . assertFalse ( hasattr ( ext , ' some ' ) ) <nl> <nl> # ' macros ' element of build info dict must be 1 - or 2 - tuple <nl> exts = [ ( ' foo . bar ' , { ' sources ' : [ ' ' ] , ' libraries ' : ' foo ' , <nl> mmm a / Lib / distutils / tests / test_build_scripts . py <nl> ppp b / Lib / distutils / tests / test_build_scripts . py <nl> class BuildScriptsTestCase ( support . TempdirManager , <nl> <nl> def test_default_settings ( self ) : <nl> cmd = self . get_build_scripts_cmd ( "" / foo / bar "" , [ ] ) <nl> - self . assertTrue ( not cmd . force ) <nl> - self . assertTrue ( cmd . build_dir is None ) <nl> + self . assertFalse ( cmd . force ) <nl> + self . assertIsNone ( cmd . build_dir ) <nl> <nl> cmd . finalize_options ( ) <nl> <nl> def test_build ( self ) : <nl> <nl> built = os . listdir ( target ) <nl> for name in expected : <nl> - self . assertTrue ( name in built ) <nl> + self . assertIn ( name , built ) <nl> <nl> def get_build_scripts_cmd ( self , target , scripts ) : <nl> import sys <nl> def test_version_int ( self ) : <nl> <nl> built = os . listdir ( target ) <nl> for name in expected : <nl> - self . assertTrue ( name in built ) <nl> + self . assertIn ( name , built ) <nl> <nl> def test_suite ( ) : <nl> return unittest . makeSuite ( BuildScriptsTestCase ) <nl> mmm a / Lib / distutils / tests / test_clean . py <nl> ppp b / Lib / distutils / tests / test_clean . py <nl> def test_simple_run ( self ) : <nl> <nl> # make sure the files where removed <nl> for name , path in dirs : <nl> - self . assertTrue ( not os . path . exists ( path ) , <nl> + self . assertFalse ( os . path . exists ( path ) , <nl> ' % s was not removed ' % path ) <nl> <nl> # let ' s run the command again ( should spit warnings but succeed ) <nl> mmm a / Lib / distutils / tests / test_config . py <nl> ppp b / Lib / distutils / tests / test_config . py <nl> def test_server_registration ( self ) : <nl> def test_server_empty_registration ( self ) : <nl> cmd = self . _cmd ( self . dist ) <nl> rc = cmd . _get_rc_file ( ) <nl> - self . assertTrue ( not os . path . exists ( rc ) ) <nl> + self . assertFalse ( os . path . exists ( rc ) ) <nl> cmd . _store_pypirc ( ' tarek ' , ' xxx ' ) <nl> self . assertTrue ( os . path . exists ( rc ) ) <nl> f = open ( rc ) <nl> mmm a / Lib / distutils / tests / test_config_cmd . py <nl> ppp b / Lib / distutils / tests / test_config_cmd . py <nl> def test_clean ( self ) : <nl> cmd . _clean ( f1 , f2 ) <nl> <nl> for f in ( f1 , f2 ) : <nl> - self . assertTrue ( not os . path . exists ( f ) ) <nl> + self . assertFalse ( os . path . exists ( f ) ) <nl> <nl> def test_suite ( ) : <nl> return unittest . makeSuite ( ConfigTestCase ) <nl> mmm a / Lib / distutils / tests / test_install . py <nl> ppp b / Lib / distutils / tests / test_install . py <nl> def test_debug_mode ( self ) : <nl> self . test_record ( ) <nl> finally : <nl> install_module . DEBUG = False <nl> - self . assertTrue ( len ( self . logs ) > old_logs_len ) <nl> + self . assertGreater ( len ( self . logs ) , old_logs_len ) <nl> <nl> <nl> def test_suite ( ) : <nl> mmm a / Lib / distutils / tests / test_install_lib . py <nl> ppp b / Lib / distutils / tests / test_install_lib . py <nl> def test_dont_write_bytecode ( self ) : <nl> finally : <nl> sys . dont_write_bytecode = old_dont_write_bytecode <nl> <nl> - self . assertTrue ( ' byte - compiling is disabled ' in self . logs [ 0 ] [ 1 ] ) <nl> + self . assertIn ( ' byte - compiling is disabled ' , self . logs [ 0 ] [ 1 ] ) <nl> <nl> <nl> def test_suite ( ) : <nl> mmm a / Lib / distutils / tests / test_install_scripts . py <nl> ppp b / Lib / distutils / tests / test_install_scripts . py <nl> def test_default_settings ( self ) : <nl> skip_build = 1 , <nl> ) <nl> cmd = install_scripts ( dist ) <nl> - self . assertTrue ( not cmd . force ) <nl> - self . assertTrue ( not cmd . skip_build ) <nl> - self . assertTrue ( cmd . build_dir is None ) <nl> - self . assertTrue ( cmd . install_dir is None ) <nl> + self . assertFalse ( cmd . force ) <nl> + self . assertFalse ( cmd . skip_build ) <nl> + self . assertIsNone ( cmd . build_dir ) <nl> + self . assertIsNone ( cmd . install_dir ) <nl> <nl> cmd . finalize_options ( ) <nl> <nl> def write_script ( name , text ) : <nl> <nl> installed = os . listdir ( target ) <nl> for name in expected : <nl> - self . assertTrue ( name in installed ) <nl> + self . assertIn ( name , installed ) <nl> <nl> <nl> def test_suite ( ) : <nl> mmm a / Lib / distutils / tests / test_msvc9compiler . py <nl> ppp b / Lib / distutils / tests / test_msvc9compiler . py <nl> def test_reg_class ( self ) : <nl> # windows registeries versions . <nl> path = r ' Control Panel \ Desktop ' <nl> v = Reg . get_value ( path , ' dragfullwindows ' ) <nl> - self . assertTrue ( v in ( ' 0 ' , ' 1 ' , ' 2 ' ) ) <nl> + self . assertIn ( v , ( ' 0 ' , ' 1 ' , ' 2 ' ) ) <nl> <nl> import winreg <nl> HKCU = winreg . HKEY_CURRENT_USER <nl> def test_reg_class ( self ) : <nl> self . assertEqual ( keys , None ) <nl> <nl> keys = Reg . read_keys ( HKCU , r ' Control Panel ' ) <nl> - self . assertTrue ( ' Desktop ' in keys ) <nl> + self . assertIn ( ' Desktop ' , keys ) <nl> <nl> def test_remove_visual_c_ref ( self ) : <nl> from distutils . msvc9compiler import MSVCCompiler <nl> def test_remove_entire_manifest ( self ) : <nl> <nl> compiler = MSVCCompiler ( ) <nl> got = compiler . _remove_visual_c_ref ( manifest ) <nl> - self . assertIs ( got , None ) <nl> + self . assertIsNone ( got ) <nl> <nl> <nl> def test_suite ( ) : <nl> mmm a / Lib / distutils / tests / test_register . py <nl> ppp b / Lib / distutils / tests / test_register . py <nl> def test_create_pypirc ( self ) : <nl> cmd = self . _get_cmd ( ) <nl> <nl> # we shouldn ' t have a . pypirc file yet <nl> - self . assertTrue ( not os . path . exists ( self . rc ) ) <nl> + self . assertFalse ( os . path . exists ( self . rc ) ) <nl> <nl> # patching input and getpass . getpass <nl> # so register gets happy <nl> def _no_way ( prompt = ' ' ) : <nl> <nl> self . assertEqual ( req1 [ ' Content - length ' ] , ' 1374 ' ) <nl> self . assertEqual ( req2 [ ' Content - length ' ] , ' 1374 ' ) <nl> - self . assertTrue ( ( b ' xxx ' ) in self . conn . reqs [ 1 ] . data ) <nl> + self . assertIn ( b ' xxx ' , self . conn . reqs [ 1 ] . data ) <nl> <nl> def test_password_not_in_file ( self ) : <nl> <nl> def test_registering ( self ) : <nl> req = self . conn . reqs [ 0 ] <nl> headers = dict ( req . headers ) <nl> self . assertEqual ( headers [ ' Content - length ' ] , ' 608 ' ) <nl> - self . assertTrue ( ( b ' tarek ' ) in req . data ) <nl> + self . assertIn ( b ' tarek ' , req . data ) <nl> <nl> def test_password_reset ( self ) : <nl> # this test runs choice 3 <nl> def test_password_reset ( self ) : <nl> req = self . conn . reqs [ 0 ] <nl> headers = dict ( req . headers ) <nl> self . assertEqual ( headers [ ' Content - length ' ] , ' 290 ' ) <nl> - self . assertTrue ( ( b ' tarek ' ) in req . data ) <nl> + self . assertIn ( b ' tarek ' , req . data ) <nl> <nl> @ unittest . skipUnless ( docutils is not None , ' needs docutils ' ) <nl> def test_strict ( self ) : <nl> mmm a / Lib / distutils / tests / test_sysconfig . py <nl> ppp b / Lib / distutils / tests / test_sysconfig . py <nl> def test_get_python_inc ( self ) : <nl> <nl> def test_get_config_vars ( self ) : <nl> cvars = sysconfig . get_config_vars ( ) <nl> - self . assertTrue ( isinstance ( cvars , dict ) ) <nl> + self . assertIsInstance ( cvars , dict ) <nl> self . assertTrue ( cvars ) <nl> <nl> def test_srcdir ( self ) : <nl> mmm a / Lib / distutils / tests / test_util . py <nl> ppp b / Lib / distutils / tests / test_util . py <nl> def test_strtobool ( self ) : <nl> self . assertTrue ( strtobool ( y ) ) <nl> <nl> for n in no : <nl> - self . assertTrue ( not strtobool ( n ) ) <nl> + self . assertFalse ( strtobool ( n ) ) <nl> <nl> def test_rfc822_escape ( self ) : <nl> header = ' I am a \ npoor \ nlonesome \ nheader \ n ' <nl>",Issue : Use specific asserts in distutils tests .,python/cpython,932c6160b58396d97efdf82779a76c4f648a75f8,2013-11-16T22:20:12Z
"mmm a / servers / puppet / modules / zulip / files / nagios3 / conf . d / hosts . cfg <nl> ppp b / servers / puppet / modules / zulip / files / nagios3 / conf . d / hosts . cfg <nl> <nl> + define host { <nl> + use generic - host <nl> + host_name lb0 <nl> + alias lb0 <nl> + address lb0 . zulip . net <nl> + hostgroups all , pageable_servers <nl> + } <nl> + <nl> define host { <nl> use generic - host <nl> host_name app <nl>",nagios : Add lb0 to our host configuration .,zulip/zulip,ebb34fe8916e901d5cae05cebc1aee7f293be7d7,2013-10-28T21:15:12Z
"mmm a / docs / intro / tutorial . rst <nl> ppp b / docs / intro / tutorial . rst <nl> use Firefox Developer Tools or some Firefox extensions like Firebug . For more <nl> information see : ref : ` topics - firebug ` and : ref : ` topics - firefox ` . <nl> <nl> After inspecting the page source , you ' ll find that every quote in the website <nl> - is inside a separate ` ` < div class = "" quote "" > ` ` element , such as : <nl> + is inside a separate ` ` < div class = "" quote "" > ` ` element , such as : : <nl> <nl> < div class = "" quote "" > <nl> < span class = "" text "" > “ We accept the love we think we deserve . ” < / span > <nl>",fix indentation issue,scrapy/scrapy,bc67cd9edd825abb6c918292cbca25bc76f1e923,2016-09-14T15:39:29Z
"mmm a / Dockerfile - dev <nl> ppp b / Dockerfile - dev <nl> RUN useradd - d / home / zulip - m zulip & & echo ' zulip ALL = ( ALL ) NOPASSWD : ALL ' > > / e <nl> USER zulip <nl> <nl> RUN ln - nsf / srv / zulip ~ / zulip <nl> - <nl> + RUN echo ' export LC_ALL = "" en_US . UTF - 8 "" LANG = "" en_US . UTF - 8 "" LANGUAGE = "" en_US . UTF - 8 "" ' > > ~ zulip / . bashrc <nl> RUN echo ' export LC_ALL = "" en_US . UTF - 8 "" LANG = "" en_US . UTF - 8 "" LANGUAGE = "" en_US . UTF - 8 "" ' > > ~ zulip / . bash_profile <nl> <nl> WORKDIR / srv / zulip <nl>",provision : Fix Docker development environment unicode issues .,zulip/zulip,7331cdc0f5acd9692a1b6d43b8b66bf72137d6ae,2019-01-29T06:08:19Z
"mmm a / bokehjs / src / coffee / models / glyphs / multi_line . coffee <nl> ppp b / bokehjs / src / coffee / models / glyphs / multi_line . coffee <nl> export class MultiLineView extends GlyphView <nl> x : this . renderer . plot_view . canvas . vx_to_sx ( geometry . vx ) <nl> y : this . renderer . plot_view . canvas . vy_to_sy ( geometry . vy ) <nl> shortest = 9999 <nl> - threshold = Math . max ( 2 , @ visuals . line . line_width . value ( ) / 2 ) <nl> <nl> hits = { } <nl> for i in [ 0 . . . @ sxs . length ] <nl> + threshold = Math . max ( 2 , @ visuals . line . cache_select ( ' line_width ' , i ) / 2 ) <nl> points = null <nl> for j in [ 0 . . . @ sxs [ i ] . length - 1 ] <nl> [ p0 , p1 ] = [ { x : @ sxs [ i ] [ j ] , y : @ sys [ i ] [ j ] } , { x : @ sxs [ i ] [ j + 1 ] , y : @ sys [ i ] [ j + 1 ] } ] <nl>",Merge pull request from bokeh / bryanv / 6130_line_width_hit_test,bokeh/bokeh,b2e41f6819333c8032fffc1063d093665eba71a9,2017-04-20T16:06:36Z
"new file mode 100644 <nl> index 0000000000000 . . f4e0259c15440 <nl> mmm / dev / null <nl> ppp b / Mac / Lib / toolbox / QuickTime . py <nl> <nl> + # Generated from ' Sap : CodeWarrior7 : Metrowerks CodeWarrior : MacOS Support : Headers : Universal Headers : Movies . h ' <nl> + <nl> + MovieFileType = ' MooV ' <nl> + MediaHandlerType = ' mhlr ' <nl> + DataHandlerType = ' dhlr ' <nl> + VideoMediaType = ' vide ' <nl> + SoundMediaType = ' soun ' <nl> + TextMediaType = ' text ' <nl> + BaseMediaType = ' gnrc ' <nl> + MPEGMediaType = ' MPEG ' <nl> + MusicMediaType = ' musi ' <nl> + TimeCodeMediaType = ' tmcd ' <nl> + HandleDataHandlerSubType = ' hndl ' <nl> + VisualMediaCharacteristic = ' eyes ' <nl> + AudioMediaCharacteristic = ' ears ' <nl> + DoTheRightThing = 0 <nl> + dfDontDisplay = 1 < < 0 <nl> + dfDontAutoScale = 1 < < 1 <nl> + dfClipToTextBox = 1 < < 2 <nl> + dfUseMovieBGColor = 1 < < 3 <nl> + dfShrinkTextBoxToFit = 1 < < 4 <nl> + dfScrollIn = 1 < < 5 <nl> + dfScrollOut = 1 < < 6 <nl> + dfHorizScroll = 1 < < 7 <nl> + dfReverseScroll = 1 < < 8 <nl> + dfContinuousScroll = 1 < < 9 <nl> + dfFlowHoriz = 1 < < 10 <nl> + dfDropShadow = 1 < < 12 <nl> + dfAntiAlias = 1 < < 13 <nl> + dfKeyedText = 1 < < 14 <nl> + dfInverseHilite = 1 < < 15 <nl> + searchTextDontGoToFoundTime = 1L < < 16 <nl> + searchTextDontHiliteFoundText = 1L < < 17 <nl> + searchTextOneTrackOnly = 1L < < 18 <nl> + searchTextEnabledTracksOnly = 1L < < 19 <nl> + movieProgressOpen = 0 <nl> + movieProgressUpdatePercent = 1 <nl> + movieProgressClose = 2 <nl> + progressOpFlatten = 1 <nl> + mediaQualityDraft = 0x0000 <nl> + mediaQualityNormal = 0x0040 <nl> + mediaQualityBetter = 0x0080 <nl> + mediaQualityBest = 0x00C0 <nl> + loopTimeBase = 1 <nl> + palindromeLoopTimeBase = 2 <nl> + maintainTimeBaseZero = 4 <nl> + triggerTimeFwd = 0x0001 <nl> + triggerTimeBwd = 0x0002 <nl> + triggerTimeEither = 0x0003 <nl> + triggerRateLT = 0x0004 <nl> + triggerRateGT = 0x0008 <nl> + triggerRateEqual = 0x0010 <nl> + triggerRateChange = 0 <nl> + triggerAtStart = 0x0001 <nl> + triggerAtStop = 0x0002 <nl> + timeBaseBeforeStartTime = 1 <nl> + timeBaseAfterStopTime = 2 <nl> + callBackAtTime = 1 <nl> + callBackAtRate = 2 <nl> + callBackAtTimeJump = 3 <nl> + callBackAtExtremes = 4 <nl> + callBackAtInterrupt = 0x8000 <nl> + callBackAtDeferredTask = 0x4000 <nl> + qtcbNeedsRateChanges = 1 <nl> + qtcbNeedsTimeChanges = 2 <nl> + qtcbNeedsStartStopChanges = 4 <nl> + keepInRam = 1 < < 0 <nl> + unkeepInRam = 1 < < 1 <nl> + flushFromRam = 1 < < 2 <nl> + loadForwardTrackEdits = 1 < < 3 <nl> + loadBackwardTrackEdits = 1 < < 4 <nl> + newMovieActive = 1 < < 0 <nl> + newMovieDontResolveDataRefs = 1 < < 1 <nl> + newMovieDontAskUnresolvedDataRefs = 1 < < 2 <nl> + newMovieDontAutoAlternates = 1 < < 3 <nl> + trackUsageInMovie = 1 < < 1 <nl> + trackUsageInPreview = 1 < < 2 <nl> + trackUsageInPoster = 1 < < 3 <nl> + mediaSampleNotSync = 1 < < 0 <nl> + mediaSampleShadowSync = 1 < < 1 <nl> + pasteInParallel = 1 <nl> + showUserSettingsDialog = 2 <nl> + movieToFileOnlyExport = 4 <nl> + nextTimeMediaSample = 1 < < 0 <nl> + nextTimeMediaEdit = 1 < < 1 <nl> + nextTimeTrackEdit = 1 < < 2 <nl> + nextTimeSyncSample = 1 < < 3 <nl> + nextTimeEdgeOK = 1 < < 14 <nl> + nextTimeIgnoreActiveSegment = 1 < < 15 <nl> + createMovieFileDeleteCurFile = 1L < < 31 <nl> + createMovieFileDontCreateMovie = 1L < < 30 <nl> + createMovieFileDontOpenFile = 1L < < 29 <nl> + flattenAddMovieToDataFork = 1L < < 0 <nl> + flattenActiveTracksOnly = 1L < < 2 <nl> + flattenDontInterleaveFlatten = 1L < < 3 <nl> + movieInDataForkResID = - 1 <nl> + mcTopLeftMovie = 1 < < 0 <nl> + mcScaleMovieToFit = 1 < < 1 <nl> + mcWithBadge = 1 < < 2 <nl> + mcNotVisible = 1 < < 3 <nl> + mcWithFrame = 1 < < 4 <nl> + movieScrapDontZeroScrap = 1 < < 0 <nl> + movieScrapOnlyPutMovie = 1 < < 1 <nl> + dataRefSelfReference = 1 < < 0 <nl> + dataRefWasNotResolved = 1 < < 1 <nl> + hintsScrubMode = 1 < < 0 <nl> + hintsLoop = 1 < < 1 <nl> + hintsDontPurge = 1 < < 2 <nl> + hintsUseScreenBuffer = 1 < < 5 <nl> + hintsAllowInterlace = 1 < < 6 <nl> + hintsUseSoundInterp = 1 < < 7 <nl> + hintsHighQuality = 1 < < 8 <nl> + hintsPalindrome = 1 < < 9 <nl> + hintsInactive = 1 < < 11 <nl> + mediaHandlerFlagBaseClient = 1 <nl> + movieTrackMediaType = 1 < < 0 <nl> + movieTrackCharacteristic = 1 < < 1 <nl> + movieTrackEnabledOnly = 1 < < 2 <nl> + movieDrawingCallWhenChanged = 0 <nl> + movieDrawingCallAlways = 1 <nl> + txtProcDefaultDisplay = 0 <nl> + txtProcDontDisplay = 1 <nl> + txtProcDoDisplay = 2 <nl> + findTextEdgeOK = 1 < < 0 <nl> + findTextCaseSensitive = 1 < < 1 <nl> + findTextReverseSearch = 1 < < 2 <nl> + findTextWrapAround = 1 < < 3 <nl> + findTextUseOffset = 1 < < 4 <nl> + dropShadowOffsetType = ' drpo ' <nl> + dropShadowTranslucencyType = ' drpt ' <nl> + preloadAlways = 1L < < 0 <nl> + preloadOnlyIfEnabled = 1L < < 1 <nl> + MovieControllerComponentType = ' play ' <nl> + mcActionIdle = 1 <nl> + mcActionDraw = 2 <nl> + mcActionActivate = 3 <nl> + mcActionDeactivate = 4 <nl> + mcActionMouseDown = 5 <nl> + mcActionKey = 6 <nl> + mcActionPlay = 8 <nl> + mcActionGoToTime = 12 <nl> + mcActionSetVolume = 14 <nl> + mcActionGetVolume = 15 <nl> + mcActionStep = 18 <nl> + mcActionSetLooping = 21 <nl> + mcActionGetLooping = 22 <nl> + mcActionSetLoopIsPalindrome = 23 <nl> + mcActionGetLoopIsPalindrome = 24 <nl> + mcActionSetGrowBoxBounds = 25 <nl> + mcActionControllerSizeChanged = 26 <nl> + mcActionSetSelectionBegin = 29 <nl> + mcActionSetSelectionDuration = 30 <nl> + mcActionSetKeysEnabled = 32 <nl> + mcActionGetKeysEnabled = 33 <nl> + mcActionSetPlaySelection = 34 <nl> + mcActionGetPlaySelection = 35 <nl> + mcActionSetUseBadge = 36 <nl> + mcActionGetUseBadge = 37 <nl> + mcActionSetFlags = 38 <nl> + mcActionGetFlags = 39 <nl> + mcActionSetPlayEveryFrame = 40 <nl> + mcActionGetPlayEveryFrame = 41 <nl> + mcActionGetPlayRate = 42 <nl> + mcActionShowBalloon = 43 <nl> + mcActionBadgeClick = 44 <nl> + mcActionMovieClick = 45 <nl> + mcActionSuspend = 46 <nl> + mcActionResume = 47 <nl> + mcActionSetControllerKeysEnabled = 48 <nl> + mcActionGetTimeSliderRect = 49 <nl> + mcActionMovieEdited = 50 <nl> + mcActionGetDragEnabled = 51 <nl> + mcActionSetDragEnabled = 52 <nl> + mcFlagSuppressMovieFrame = 1 < < 0 <nl> + mcFlagSuppressStepButtons = 1 < < 1 <nl> + mcFlagSuppressSpeakerButton = 1 < < 2 <nl> + mcFlagsUseWindowPalette = 1 < < 3 <nl> + mcFlagsDontInvalidate = 1 < < 4 <nl> + mcPositionDontInvalidate = 1 < < 5 <nl> + mcInfoUndoAvailable = 1 < < 0 <nl> + mcInfoCutAvailable = 1 < < 1 <nl> + mcInfoCopyAvailable = 1 < < 2 <nl> + mcInfoPasteAvailable = 1 < < 3 <nl> + mcInfoClearAvailable = 1 < < 4 <nl> + mcInfoHasSound = 1 < < 5 <nl> + mcInfoIsPlaying = 1 < < 6 <nl> + mcInfoIsLooping = 1 < < 7 <nl> + mcInfoIsInPalindrome = 1 < < 8 <nl> + mcInfoEditingEnabled = 1 < < 9 <nl> + mcMenuUndo = 1 <nl> + mcMenuCut = 3 <nl> + mcMenuCopy = 4 <nl> + mcMenuPaste = 5 <nl> + mcMenuClear = 6 <nl> + kMCSetMovieSelect = 0x2 <nl> + kMCGetIndMovieSelect = 0x5 <nl> + kMCRemoveMovieSelect = 0x6 <nl> + kMCIsPlayerEventSelect = 0x7 <nl> + kMCSetActionFilterSelect = 0x8 <nl> + kMCDoActionSelect = 0x9 <nl> + kMCSetControllerAttachedSelect = 0xA <nl> + kMCIsControllerAttachedSelect = 0xB <nl> + kMCSetControllerPortSelect = 0xC <nl> + kMCGetControllerPortSelect = 0xD <nl> + kMCSetVisibleSelect = 0xE <nl> + kMCGetVisibleSelect = 0xF <nl> + kMCGetControllerBoundsRectSelect = 0x10 <nl> + kMCSetControllerBoundsRectSelect = 0x11 <nl> + kMCGetControllerBoundsRgnSelect = 0x12 <nl> + kMCGetWindowRgnSelect = 0x13 <nl> + kMCMovieChangedSelect = 0x14 <nl> + kMCSetDurationSelect = 0x15 <nl> + kMCGetCurrentTimeSelect = 0x16 <nl> + kMCNewAttachedControllerSelect = 0x17 <nl> + kMCDrawSelect = 0x18 <nl> + kMCActivateSelect = 0x19 <nl> + kMCIdleSelect = 0x1A <nl> + kMCKeySelect = 0x1B <nl> + kMCClickSelect = 0x1C <nl> + kMCEnableEditingSelect = 0x1D <nl> + kMCIsEditingEnabledSelect = 0x1E <nl> + kMCCopySelect = 0x1F <nl> + kMCCutSelect = 0x20 <nl> + kMCPasteSelect = 0x21 <nl> + kMCClearSelect = 0x22 <nl> + kMCUndoSelect = 0x23 <nl> + kMCPositionControllerSelect = 0x24 <nl> + kMCGetControllerInfoSelect = 0x25 <nl> + kMCSetClipSelect = 0x28 <nl> + kMCGetClipSelect = 0x29 <nl> + kMCDrawBadgeSelect = 0x2A <nl> + kMCSetUpEditMenuSelect = 0x2B <nl> + kMCGetMenuStringSelect = 0x2C <nl> + kMCSetActionFilterWithRefConSelect = 0x2D <nl> new file mode 100644 <nl> index 0000000000000 . . 5b9e5a7b80d82 <nl> mmm / dev / null <nl> ppp b / Mac / Modules / qt / qtgen . py <nl> <nl> + # Generated from ' Sap : CodeWarrior7 : Metrowerks CodeWarrior : MacOS Support : Headers : Universal Headers : Movies . h ' <nl> + <nl> + f = Function ( OSErr , ' EnterMovies ' , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( void , ' ExitMovies ' , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' GetMoviesError ' , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( void , ' ClearMoviesStickyError ' , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' GetMoviesStickyError ' , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Method ( void , ' MoviesTask ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( long , ' maxMilliSecToUse ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' PrerollMovie ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' time ' , InMode ) , <nl> + ( Fixed , ' Rate ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' LoadMovieIntoRam ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' time ' , InMode ) , <nl> + ( TimeValue , ' duration ' , InMode ) , <nl> + ( long , ' flags ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMovieActive ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Boolean , ' active ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( Boolean , ' GetMovieActive ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' StartMovie ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' StopMovie ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' GoToBeginningOfMovie ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' GoToEndOfMovie ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( Boolean , ' IsMovieDone ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( Boolean , ' GetMoviePreviewMode ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMoviePreviewMode ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Boolean , ' usePreview ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' ShowMoviePoster ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( PicHandle , ' GetMoviePict ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' time ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( PicHandle , ' GetMoviePosterPict ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' UpdateMovie ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' GetMovieBox ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Rect , ' boxRect ' , OutMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMovieBox ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Rect_ptr , ' boxRect ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( RgnHandle , ' GetMovieDisplayClipRgn ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMovieDisplayClipRgn ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( RgnHandle , ' theClip ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( RgnHandle , ' GetMovieClipRgn ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMovieClipRgn ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( RgnHandle , ' theClip ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( RgnHandle , ' GetMovieDisplayBoundsRgn ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( RgnHandle , ' GetMovieBoundsRgn ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Function ( Movie , ' NewMovie ' , <nl> + ( long , ' flags ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' PutMovieIntoHandle ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Handle , ' publicMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' PutMovieIntoDataFork ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( short , ' fRefNum ' , InMode ) , <nl> + ( long , ' offset ' , InMode ) , <nl> + ( long , ' maxSize ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( TimeScale , ' GetMovieTimeScale ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMovieTimeScale ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeScale , ' timeScale ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( TimeValue , ' GetMovieDuration ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( Fixed , ' GetMovieRate ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMovieRate ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Fixed , ' rate ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( Fixed , ' GetMoviePreferredRate ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMoviePreferredRate ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Fixed , ' rate ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( short , ' GetMoviePreferredVolume ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMoviePreferredVolume ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( short , ' volume ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( short , ' GetMovieVolume ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMovieVolume ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( short , ' volume ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' GetMoviePreviewTime ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' previewTime ' , OutMode ) , <nl> + ( TimeValue , ' previewDuration ' , OutMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMoviePreviewTime ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' previewTime ' , InMode ) , <nl> + ( TimeValue , ' previewDuration ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( TimeValue , ' GetMoviePosterTime ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMoviePosterTime ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' posterTime ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' GetMovieSelection ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' selectionTime ' , OutMode ) , <nl> + ( TimeValue , ' selectionDuration ' , OutMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMovieSelection ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' selectionTime ' , InMode ) , <nl> + ( TimeValue , ' selectionDuration ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMovieActiveSegment ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' startTime ' , InMode ) , <nl> + ( TimeValue , ' duration ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' GetMovieActiveSegment ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' startTime ' , OutMode ) , <nl> + ( TimeValue , ' duration ' , OutMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMovieTimeValue ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' newtime ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( long , ' GetMovieTrackCount ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetAutoTrackAlternatesEnabled ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Boolean , ' enable ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SelectMovieAlternates ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' InsertMovieSegment ' , <nl> + ( Movie , ' srcMovie ' , InMode ) , <nl> + ( Movie , ' dstMovie ' , InMode ) , <nl> + ( TimeValue , ' srcIn ' , InMode ) , <nl> + ( TimeValue , ' srcDuration ' , InMode ) , <nl> + ( TimeValue , ' dstIn ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' InsertEmptyMovieSegment ' , <nl> + ( Movie , ' dstMovie ' , InMode ) , <nl> + ( TimeValue , ' dstIn ' , InMode ) , <nl> + ( TimeValue , ' dstDuration ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' DeleteMovieSegment ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' startTime ' , InMode ) , <nl> + ( TimeValue , ' duration ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' ScaleMovieSegment ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' startTime ' , InMode ) , <nl> + ( TimeValue , ' oldDuration ' , InMode ) , <nl> + ( TimeValue , ' newDuration ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( Movie , ' CutMovieSelection ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( Movie , ' CopyMovieSelection ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' PasteMovieSelection ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Movie , ' src ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' AddMovieSelection ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Movie , ' src ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' ClearMovieSelection ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' PasteHandleIntoMovie ' , <nl> + ( Handle , ' h ' , InMode ) , <nl> + ( OSType , ' handleType ' , InMode ) , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( long , ' flags ' , InMode ) , <nl> + ( ComponentInstance , ' userComp ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' CopyMovieSettings ' , <nl> + ( Movie , ' srcMovie ' , InMode ) , <nl> + ( Movie , ' dstMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( long , ' GetMovieDataSize ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' startTime ' , InMode ) , <nl> + ( TimeValue , ' duration ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( Boolean , ' PtInMovie ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Point , ' pt ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMovieLanguage ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( long , ' language ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' GetMovieNextInterestingTime ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( short , ' interestingTimeFlags ' , InMode ) , <nl> + ( short , ' numMediaTypes ' , InMode ) , <nl> + ( OSType_ptr , ' whichMediaTypes ' , InMode ) , <nl> + ( TimeValue , ' time ' , InMode ) , <nl> + ( Fixed , ' rate ' , InMode ) , <nl> + ( TimeValue , ' interestingTime ' , OutMode ) , <nl> + ( TimeValue , ' interestingDuration ' , OutMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' CreateMovieFile ' , <nl> + ( FSSpec_ptr , ' fileSpec ' , InMode ) , <nl> + ( OSType , ' creator ' , InMode ) , <nl> + ( ScriptCode , ' scriptTag ' , InMode ) , <nl> + ( long , ' createMovieFileFlags ' , InMode ) , <nl> + ( short , ' resRefNum ' , OutMode ) , <nl> + ( Movie , ' newmovie ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' OpenMovieFile ' , <nl> + ( FSSpec_ptr , ' fileSpec ' , InMode ) , <nl> + ( short , ' resRefNum ' , OutMode ) , <nl> + ( SInt8 , ' permission ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' CloseMovieFile ' , <nl> + ( short , ' resRefNum ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' DeleteMovieFile ' , <nl> + ( FSSpec_ptr , ' fileSpec ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' NewMovieFromFile ' , <nl> + ( Movie , ' theMovie ' , OutMode ) , <nl> + ( short , ' resRefNum ' , InMode ) , <nl> + ( short , ' resId ' , OutMode ) , <nl> + ( StringPtr , ' resName ' , InMode ) , <nl> + ( short , ' newMovieFlags ' , InMode ) , <nl> + ( Boolean , ' dataRefWasChanged ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' NewMovieFromHandle ' , <nl> + ( Movie , ' theMovie ' , OutMode ) , <nl> + ( Handle , ' h ' , InMode ) , <nl> + ( short , ' newMovieFlags ' , InMode ) , <nl> + ( Boolean , ' dataRefWasChanged ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' NewMovieFromDataFork ' , <nl> + ( Movie , ' theMovie ' , OutMode ) , <nl> + ( short , ' fRefNum ' , InMode ) , <nl> + ( long , ' fileOffset ' , InMode ) , <nl> + ( short , ' newMovieFlags ' , InMode ) , <nl> + ( Boolean , ' dataRefWasChanged ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' NewMovieFromUserProc ' , <nl> + ( Movie , ' m ' , OutMode ) , <nl> + ( short , ' flags ' , InMode ) , <nl> + ( Boolean , ' dataRefWasChanged ' , OutMode ) , <nl> + ( GetMovieUPP , ' getProc ' , InMode ) , <nl> + ( void , ' refCon ' , OutMode ) , <nl> + ( Handle , ' defaultDataRef ' , InMode ) , <nl> + ( OSType , ' dataRefType ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' AddMovieResource ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( short , ' resRefNum ' , InMode ) , <nl> + ( short , ' resId ' , OutMode ) , <nl> + ( ConstStr255Param , ' resName ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' UpdateMovieResource ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( short , ' resRefNum ' , InMode ) , <nl> + ( short , ' resId ' , InMode ) , <nl> + ( ConstStr255Param , ' resName ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' RemoveMovieResource ' , <nl> + ( short , ' resRefNum ' , InMode ) , <nl> + ( short , ' resId ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Method ( Boolean , ' HasMovieChanged ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' ClearMovieChanged ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' SetMovieDefaultDataRef ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Handle , ' dataRef ' , InMode ) , <nl> + ( OSType , ' dataRefType ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' GetMovieDefaultDataRef ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Handle , ' dataRef ' , OutMode ) , <nl> + ( OSType , ' dataRefType ' , OutMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' SetMovieColorTable ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( CTabHandle , ' ctab ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' GetMovieColorTable ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( CTabHandle , ' ctab ' , OutMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' FlattenMovie ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( long , ' movieFlattenFlags ' , InMode ) , <nl> + ( FSSpec_ptr , ' theFile ' , InMode ) , <nl> + ( OSType , ' creator ' , InMode ) , <nl> + ( ScriptCode , ' scriptTag ' , InMode ) , <nl> + ( long , ' createMovieFileFlags ' , InMode ) , <nl> + ( short , ' resId ' , OutMode ) , <nl> + ( ConstStr255Param , ' resName ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( Movie , ' FlattenMovieData ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( long , ' movieFlattenFlags ' , InMode ) , <nl> + ( FSSpec_ptr , ' theFile ' , InMode ) , <nl> + ( OSType , ' creator ' , InMode ) , <nl> + ( ScriptCode , ' scriptTag ' , InMode ) , <nl> + ( long , ' createMovieFileFlags ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Function ( HandlerError , ' GetVideoMediaGraphicsMode ' , <nl> + ( MediaHandler , ' mh ' , InMode ) , <nl> + ( long , ' graphicsMode ' , OutMode ) , <nl> + ( RGBColor , ' opColor ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( HandlerError , ' SetVideoMediaGraphicsMode ' , <nl> + ( MediaHandler , ' mh ' , InMode ) , <nl> + ( long , ' graphicsMode ' , InMode ) , <nl> + ( RGBColor_ptr , ' opColor ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( HandlerError , ' GetSoundMediaBalance ' , <nl> + ( MediaHandler , ' mh ' , InMode ) , <nl> + ( short , ' balance ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( HandlerError , ' SetSoundMediaBalance ' , <nl> + ( MediaHandler , ' mh ' , InMode ) , <nl> + ( short , ' balance ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' AddTextSample ' , <nl> + ( MediaHandler , ' mh ' , InMode ) , <nl> + ( Ptr , ' text ' , InMode ) , <nl> + ( unsigned_long , ' size ' , InMode ) , <nl> + ( short , ' fontNumber ' , InMode ) , <nl> + ( short , ' fontSize ' , InMode ) , <nl> + ( short , ' textFace ' , InMode ) , <nl> + ( RGBColor , ' textColor ' , OutMode ) , <nl> + ( RGBColor , ' backColor ' , OutMode ) , <nl> + ( short , ' textJustification ' , InMode ) , <nl> + ( Rect , ' textBox ' , OutMode ) , <nl> + ( long , ' displayFlags ' , InMode ) , <nl> + ( TimeValue , ' scrollDelay ' , InMode ) , <nl> + ( short , ' hiliteStart ' , InMode ) , <nl> + ( short , ' hiliteEnd ' , InMode ) , <nl> + ( RGBColor , ' rgbHiliteColor ' , OutMode ) , <nl> + ( TimeValue , ' duration ' , InMode ) , <nl> + ( TimeValue , ' sampleTime ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' AddTESample ' , <nl> + ( MediaHandler , ' mh ' , InMode ) , <nl> + ( TEHandle , ' hTE ' , InMode ) , <nl> + ( RGBColor , ' backColor ' , OutMode ) , <nl> + ( short , ' textJustification ' , InMode ) , <nl> + ( Rect , ' textBox ' , OutMode ) , <nl> + ( long , ' displayFlags ' , InMode ) , <nl> + ( TimeValue , ' scrollDelay ' , InMode ) , <nl> + ( short , ' hiliteStart ' , InMode ) , <nl> + ( short , ' hiliteEnd ' , InMode ) , <nl> + ( RGBColor , ' rgbHiliteColor ' , OutMode ) , <nl> + ( TimeValue , ' duration ' , InMode ) , <nl> + ( TimeValue , ' sampleTime ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' AddHiliteSample ' , <nl> + ( MediaHandler , ' mh ' , InMode ) , <nl> + ( short , ' hiliteStart ' , InMode ) , <nl> + ( short , ' hiliteEnd ' , InMode ) , <nl> + ( RGBColor , ' rgbHiliteColor ' , OutMode ) , <nl> + ( TimeValue , ' duration ' , InMode ) , <nl> + ( TimeValue , ' sampleTime ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' FindNextText ' , <nl> + ( MediaHandler , ' mh ' , InMode ) , <nl> + ( Ptr , ' text ' , InMode ) , <nl> + ( long , ' size ' , InMode ) , <nl> + ( short , ' findFlags ' , InMode ) , <nl> + ( TimeValue , ' startTime ' , InMode ) , <nl> + ( TimeValue , ' foundTime ' , OutMode ) , <nl> + ( TimeValue , ' foundDuration ' , OutMode ) , <nl> + ( long , ' offset ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' HiliteTextSample ' , <nl> + ( MediaHandler , ' mh ' , InMode ) , <nl> + ( TimeValue , ' sampleTime ' , InMode ) , <nl> + ( short , ' hiliteStart ' , InMode ) , <nl> + ( short , ' hiliteEnd ' , InMode ) , <nl> + ( RGBColor , ' rgbHiliteColor ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' SetTextSampleData ' , <nl> + ( MediaHandler , ' mh ' , InMode ) , <nl> + ( void , ' data ' , OutMode ) , <nl> + ( OSType , ' dataType ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Method ( void , ' GetPosterBox ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Rect , ' boxRect ' , OutMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( void , ' SetPosterBox ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Rect_ptr , ' boxRect ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( RgnHandle , ' GetMovieSegmentDisplayBoundsRgn ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( TimeValue , ' time ' , InMode ) , <nl> + ( TimeValue , ' duration ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( ComponentInstance , ' NewMovieController ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( Rect_ptr , ' movieRect ' , InMode ) , <nl> + ( long , ' someFlags ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Function ( void , ' DisposeMovieController ' , <nl> + ( ComponentInstance , ' mc ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Method ( void , ' ShowMovieInformation ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( ModalFilterUPP , ' filterProc ' , InMode ) , <nl> + ( long , ' refCon ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Method ( OSErr , ' PutMovieOnScrap ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( long , ' movieScrapFlags ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Function ( Movie , ' NewMovieFromScrap ' , <nl> + ( long , ' newMovieFlags ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Method ( void , ' SetMoviePlayHints ' , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( long , ' flags ' , InMode ) , <nl> + ( long , ' flagsMask ' , InMode ) , <nl> + ) <nl> + methods . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCSetMovie ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( WindowPtr , ' movieWindow ' , InMode ) , <nl> + ( Point , ' where ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( Movie , ' MCGetIndMovie ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( short , ' index ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCRemoveMovie ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCIsPlayerEvent ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( EventRecord_ptr , ' e ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCDoAction ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( short , ' action ' , InMode ) , <nl> + ( void , ' params ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCSetControllerAttached ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( Boolean , ' attach ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCIsControllerAttached ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCSetVisible ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( Boolean , ' visible ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCGetVisible ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCGetControllerBoundsRect ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( Rect , ' bounds ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCSetControllerBoundsRect ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( Rect_ptr , ' bounds ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( RgnHandle , ' MCGetControllerBoundsRgn ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( RgnHandle , ' MCGetWindowRgn ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( WindowPtr , ' w ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCMovieChanged ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( Movie , ' m ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCSetDuration ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( TimeValue , ' duration ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( TimeValue , ' MCGetCurrentTime ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( TimeScale , ' scale ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCNewAttachedController ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( Movie , ' theMovie ' , InMode ) , <nl> + ( WindowPtr , ' w ' , InMode ) , <nl> + ( Point , ' where ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCDraw ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( WindowPtr , ' w ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCActivate ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( WindowPtr , ' w ' , InMode ) , <nl> + ( Boolean , ' activate ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCIdle ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCKey ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( SInt8 , ' key ' , InMode ) , <nl> + ( long , ' modifiers ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCClick ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( WindowPtr , ' w ' , InMode ) , <nl> + ( Point , ' where ' , InMode ) , <nl> + ( long , ' when ' , InMode ) , <nl> + ( long , ' modifiers ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCEnableEditing ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( Boolean , ' enabled ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( long , ' MCIsEditingEnabled ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( Movie , ' MCCopy ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( Movie , ' MCCut ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCPaste ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( Movie , ' srcMovie ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCClear ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCUndo ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCPositionController ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( Rect_ptr , ' movieRect ' , InMode ) , <nl> + ( Rect_ptr , ' controllerRect ' , InMode ) , <nl> + ( long , ' someFlags ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCGetControllerInfo ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( long , ' someFlags ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCSetClip ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( RgnHandle , ' theClip ' , InMode ) , <nl> + ( RgnHandle , ' movieClip ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCGetClip ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( RgnHandle , ' theClip ' , OutMode ) , <nl> + ( RgnHandle , ' movieClip ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCDrawBadge ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( RgnHandle , ' movieRgn ' , InMode ) , <nl> + ( RgnHandle , ' badgeRgn ' , OutMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCSetUpEditMenu ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( long , ' modifiers ' , InMode ) , <nl> + ( MenuHandle , ' mh ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( ComponentResult , ' MCGetMenuString ' , <nl> + ( MovieController , ' mc ' , InMode ) , <nl> + ( long , ' modifiers ' , InMode ) , <nl> + ( short , ' item ' , InMode ) , <nl> + ( Str255 , ' aString ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' QueueSyncTask ' , <nl> + ( QTSyncTaskPtr , ' task ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> + f = Function ( OSErr , ' DequeueSyncTask ' , <nl> + ( QTSyncTaskPtr , ' qElem ' , InMode ) , <nl> + ) <nl> + functions . append ( f ) <nl> + <nl> new file mode 100644 <nl> index 0000000000000 . . 4a715d6e2cf22 <nl> mmm / dev / null <nl> ppp b / Mac / Modules / qt / qtscan . py <nl> <nl> + # Scan an Apple header file , generating a Python file of generator calls . <nl> + <nl> + import addpack <nl> + addpack . addpack ( ' : tools : bgen : bgen ' ) <nl> + from scantools import Scanner <nl> + <nl> + LONG = "" QuickTime "" <nl> + SHORT = "" qt "" <nl> + OBJECT = "" Movie "" <nl> + <nl> + def main ( ) : <nl> + input = "" Movies . h "" <nl> + output = SHORT + "" gen . py "" <nl> + defsoutput = LONG + "" . py "" <nl> + scanner = MyScanner ( input , output , defsoutput ) <nl> + scanner . scan ( ) <nl> + scanner . close ( ) <nl> + print "" = = = Done scanning and generating , now importing the generated code . . . = = = "" <nl> + exec "" import "" + SHORT + "" support "" <nl> + print "" = = = Done . It ' s up to you to compile it now ! = = = "" <nl> + <nl> + class MyScanner ( Scanner ) : <nl> + <nl> + def destination ( self , type , name , arglist ) : <nl> + classname = "" Function "" <nl> + listname = "" functions "" <nl> + if arglist : <nl> + t , n , m = arglist [ 0 ] <nl> + if t = = OBJECT and m = = "" InMode "" : <nl> + classname = "" Method "" <nl> + listname = "" methods "" <nl> + return classname , listname <nl> + <nl> + def makeblacklistnames ( self ) : <nl> + return [ <nl> + "" DisposeMovie "" , # Done on python - object disposal <nl> + "" GetMovieCreationTime "" , # type "" unsigned long "" in C , inparseable <nl> + "" GetMovieModificationTime "" , # Ditto <nl> + ] <nl> + <nl> + def makeblacklisttypes ( self ) : <nl> + return [ <nl> + "" MoviesErrorUPP "" , <nl> + "" Track "" , # XXXX To be done in the future <nl> + "" Media "" , <nl> + "" UserData "" , <nl> + "" TimeBase "" , <nl> + "" QTCallBack "" , <nl> + "" Component "" , <nl> + "" TimeRecord "" , <nl> + "" TimeRecord_ptr "" , <nl> + "" TrackEditState "" , <nl> + "" MovieEditState "" , <nl> + "" MoviePreviewCallOutUPP "" , <nl> + "" CGrafPtr "" , <nl> + "" GDHandle "" , <nl> + "" MovieDrawingCompleteUPP "" , <nl> + "" PixMapHandle "" , <nl> + "" MatrixRecord "" , <nl> + "" MatrixRecord_ptr "" , <nl> + "" QTCallBackUPP "" , <nl> + "" TextMediaUPP "" , <nl> + "" MovieProgressUPP "" , <nl> + "" MovieRgnCoverUPP "" , <nl> + "" MCActionFilterUPP "" , <nl> + "" MCActionFilterWithRefConUPP "" , <nl> + "" SampleDescription "" , <nl> + "" SoundDescription "" , <nl> + "" TextDescription "" , <nl> + "" MusicDescription "" , <nl> + ] <nl> + <nl> + def makerepairinstructions ( self ) : <nl> + return [ <nl> + ] <nl> + <nl> + if __name__ = = "" __main__ "" : <nl> + main ( ) <nl> new file mode 100644 <nl> index 0000000000000 . . 5c29b75f82505 <nl> mmm / dev / null <nl> ppp b / Mac / Modules / qt / qtsupport . py <nl> <nl> + # This script generates a Python interface for an Apple Macintosh Manager . <nl> + # It uses the "" bgen "" package to generate C code . <nl> + # The function specifications are generated by scanning the mamager ' s header file , <nl> + # using the "" scantools "" package ( customized for this particular manager ) . <nl> + <nl> + import string <nl> + <nl> + # Declarations that change for each manager <nl> + MACHEADERFILE = ' Movies . h ' # The Apple header file <nl> + MODNAME = ' qt ' # The name of the module <nl> + OBJECTNAME = ' Movie ' # The basic name of the objects used here <nl> + <nl> + # The following is * usually * unchanged but may still require tuning <nl> + MODPREFIX = MODNAME # The prefix for module - wide routines <nl> + OBJECTTYPE = "" Movie "" # The C type used to represent them <nl> + OBJECTPREFIX = MODPREFIX + ' Obj ' # The prefix for object methods <nl> + INPUTFILE = string . lower ( MODPREFIX ) + ' gen . py ' # The file generated by the scanner <nl> + OUTPUTFILE = MODNAME + "" module . c "" # The file generated by this program <nl> + <nl> + from macsupport import * <nl> + <nl> + # Create the type objects <nl> + <nl> + includestuff = includestuff + "" "" "" <nl> + # include < % s > "" "" "" % MACHEADERFILE + "" "" "" <nl> + "" "" "" <nl> + <nl> + Movie = OpaqueByValueType ( OBJECTTYPE , OBJECTPREFIX ) <nl> + TimeValue = Type ( "" TimeValue "" , "" l "" ) <nl> + TimeScale = Type ( "" TimeScale "" , "" l "" ) <nl> + TimeBaseFlags = Type ( "" TimeBaseFlags "" , "" l "" ) <nl> + QTCallBackFlags = Type ( "" QTCallBackFlags "" , "" h "" ) <nl> + TimeBaseStatus = Type ( "" TimeBaseStatus "" , "" l "" ) <nl> + QTCallBackType = Type ( "" QTCallBackType "" , "" h "" ) <nl> + nextTimeFlagsEnum = Type ( "" nextTimeFlagsEnum "" , "" h "" ) <nl> + createMovieFileFlagsEnum = Type ( "" createMovieFileFlagsEnum "" , "" l "" ) <nl> + movieFlattenFlagsEnum = Type ( "" movieFlattenFlagsEnum "" , "" l "" ) <nl> + dataRefAttributesFlags = Type ( "" dataRefAttributesFlags "" , "" l "" ) <nl> + playHintsEnum = Type ( "" playHintsEnum "" , "" l "" ) <nl> + mediaHandlerFlagsEnum = Type ( "" mediaHandlerFlagsEnum "" , "" l "" ) <nl> + <nl> + RgnHandle = OpaqueByValueType ( "" RgnHandle "" , "" ResObj "" ) <nl> + PicHandle = OpaqueByValueType ( "" PicHandle "" , "" ResObj "" ) <nl> + <nl> + <nl> + class MyObjectDefinition ( GlobalObjectDefinition ) : <nl> + def outputCheckNewArg ( self ) : <nl> + Output ( "" "" "" if ( itself = = NULL ) { <nl> + PyErr_SetString ( Qt_Error , "" Cannot create null Movie "" ) ; <nl> + return NULL ; <nl> + } "" "" "" ) <nl> + def outputFreeIt ( self , itselfname ) : <nl> + Output ( "" DisposeMovie ( % s ) ; "" , itselfname ) <nl> + <nl> + # From here on it ' s basically all boiler plate . . . <nl> + <nl> + # Create the generator groups and link them <nl> + module = MacModule ( MODNAME , MODPREFIX , includestuff , finalstuff , initstuff ) <nl> + object = MyObjectDefinition ( OBJECTNAME , OBJECTPREFIX , OBJECTTYPE ) <nl> + module . addobject ( object ) <nl> + <nl> + # Create the generator classes used to populate the lists <nl> + Function = FunctionGenerator <nl> + Method = MethodGenerator <nl> + <nl> + # Create and populate the lists <nl> + functions = [ ] <nl> + methods = [ ] <nl> + execfile ( INPUTFILE ) <nl> + <nl> + # add the populated lists to the generator groups <nl> + # ( in a different wordl the scan program would generate this ) <nl> + for f in functions : module . add ( f ) <nl> + for f in methods : object . add ( f ) <nl> + <nl> + # generate output ( open the output file as late as possible ) <nl> + SetOutputFileName ( OUTPUTFILE ) <nl> + module . generate ( ) <nl> + <nl>",QuickTime support ( not yet functional ),python/cpython,cb4eaadd688d1ebce9ec46334966d8bb0f0fd199,1995-11-30T15:03:59Z
